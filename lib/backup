#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


backup_setup() {
  require settings
  require crontask
  settings prompt_path BACKUP_DIR "/srv/backup" "Backup directory path"
  BACKUP_LIST=" "
  settings save

  crontask add backup hourly
  crontask add backup daily
  crontask add backup weekly
}

backup_cleanup() {
  require settings
  unset BACKUP_DIR
  unset BACKUP_LIST
  crontask del backup hourly
  crontask del backup daily
  crontask del backup weekly
  settings save
}

backup_add() {
  local entry="$1"; shift
  local period="$1"; shift || period="daily"
  require settings
  require sshlink
  require backup setup

  local host="${entry%%:*}"

  sshlink add "$host"
  if [ "$host" = "$entry" ] && ! sshlink has_sc "$host"; then
    echo "Error: $SC is not installed on $host"
    exit 1
  fi

  BACKUP_LIST="$BACKUP_LIST${period}:$entry "

  settings save
}

backup_del() {
  local entry="$1"; shift
  local period="$1"; shift || period="daily"
  require settings

  BACKUP_LIST="$(sed -e "s;$period:$entry ;;" <<< "$BACKUP_LIST")"

  settings save
}

backup_has() {
  local entry="$1"; shift
  local period="$1"; shift || period="daily"

  [[ " $BACKUP_LIST " = *" $period:$entry "* ]]
}

backup_list() {
  for b in $BACKUP_LIST; do
    echo $b
  done
}

backup_cron() {
  local period="$1"; shift

  local bentry
  local bperiod
  for b in $BACKUP_LIST; do
    bperiod="${b%%:*}"
    bentry="${b#*:}"
    [ "$bperiod" = "$period" ] || continue

    backup start "$bentry"
  done
}

backup_start() {
  local entry="$1"; shift
  local host="${entry%%:*}"
  require sshlink

  [ -d "$BACKUP_DIR/$host/fs" ] || mkdir -p "$BACKUP_DIR/$host/fs"

  if [ "$host" = "$entry" ]; then
    # Backup a SC compatible host

    # Backup host settings
    sshlink getsettings "$host" > "$BACKUP_DIR/$host/$SC"

    # Backup host files
    sshlink sc "$host" broadcall files | sshlink getfiles "$host" "$BACKUP_DIR/$host/fs"

    # Backup host databases
    if sshlink sc "$host" db ready; then
      local dblist="$(sshlink sc "$host" broadcall_ready db)"
      if [ "$dblist" ]; then
        require db
        local db
        local dbuser
        local dbname
        [ -d "$BACKUP_DIR/$host/db" ] || mkdir -p "$BACKUP_DIR/$host/db"
        for db in $dblist; do
          dbuser="${db%%:*}"
          dbname="${db#*:}"
          sshlink sc "$host" db backup "$dbuser" "$dbname" > "$BACKUP_DIR/$host/db/$db.xz"
        done
      fi
    fi
  else
    # Backup a specific path on a foreign host
    local path="${entry#*:}"
    sshlink getfiles "$host" "$BACKUP_DIR/$host/fs" <<< "$path"
  fi
}

backup_contains() {
  local source="$1"; shift
  local mod="$1"; shift

  require settings
  require files
  require db

  require "$mod"
  if cancall "$mod" source_contains; then
    "$mod" source_contains "$source"
  else
    settings source_contains "$source" "$mod" \
    && files source_contains "$source" "$mod" \
    && db source_contains "$source" "$mod"
  fi
}

backup_restorefrom() {
  local source="$1"; shift

  local remote=""
  if [ "${source%%:*}" != "$source" ]; then
    # Remote source. Mount using sshfs.

    require temp
    require sshlink
    sshlink add "${source%%:*}"
    syspackage sshfs sshfs
    temp dir backupmnt
    sshfs "$source" "$backupmnt"
    trappush "umount '$backupmnt'"

    source="$backupmnt"
    remote="TRUE"
  fi

  require settings
  local source_version="$(settings source_version "$source")"

  local restored=""

  backup__restoremod() {
    local mod="$1"; shift

    if listhas restored "$mod"; then
      return 0
    fi

    require "$mod"
    local dep
    for dep in $(moddeps "$mod"); do
      backup__restoremod "$dep"
    done

    if cancall "$mod" restore; then
      echo "Restoring module $mod ..."
      "$mod" restore "$source" "$source_version"
      listadd restored "$mod"
    else
      echo "Restoring module data for $mod ..."
      backup restoremodule "$mod" "$source"
      listadd restored "$mod"
    fi
  }

  local mod
  for mod in $(modlist); do
    require "$mod"
    if cancall "$mod" restore || backup contains "$source" "$mod"; then
      backup__restoremod "$mod"
    else
      echo "No data found for $mod"
    fi
  done

  echo "Restore finished."
  upgrade_modules "$source_version" "$SCVERSION"
  SETTING_VERSION="$SCVERSION"
  settings save

  if [ "$remote" ]; then
    umount "$backupmnt" && trappop
    temp release backupmnt
  fi
}

backup_restoremodule() {
  local mod="$1"; shift
  local source="$1"; shift

  require settings
  require files
  require db
  settings import "$source" "$mod"
  require "$mod" setup
  files restoremodule "$mod" "$source"
  db restoremodule "$mod" "$source"
}

backup_enabled() {
  if [ "$BACKUP_LIST" ] && [ "$BACKUP_DIR" ] && [ -d "$BACKUP_DIR" ]; then
    return 0
  fi
  return 1
}

backup_ready() {
  require settings
  settings ready backup \
  && [ -d "$BACKUP_DIR" ] \
  && has crontask \
  && crontask has backup hourly \
  && crontask has backup daily \
  && crontask has backup weekly
}

backup_sync() {
  local host="$1"; shift
  local mode="$1"; shift

  if [ "$mode" = backup ]; then
    require sshlink
    sshlink importsettings "$host" backup/BACKUP_LIST
  fi
}

backup_settings() {
  echo BACKUP_DIR
  echo BACKUP_LIST
}
