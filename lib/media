#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


KODIDIR="/var/lib/kodi"

media_setup() {
  require settings
  rm -r "$KODIDIR" # The directory must not exist so home directory creation works.
  settings prompt_bool RETROARCH "true" "Install RetroArch ?"
  settings save

  require mass setup

  # Add the kodi user
  adduser --home "$KODIDIR" --disabled-password --gecos "Kodi user for ${SC},,," kodi

  # Install required debian packages
  syspackage lightdm lightdm
  syspackage kodi kodi
  syspackage speedcrunch speedcrunch
  syspackage awesome awesome
  syspackage firefox-esr firefox
  syspackage numlockx numlockx
  syspackage pavucontrol pavucontrol
  syspackage pulseaudio pulseaudio

  # Build lightdm configuration
  sed -i -e 's/^#user-session=.*/user-session=lightdm-xsession/' /etc/lightdm/lightdm.conf
  sed -i -e 's/^#autologin-user=.*/autologin-user=kodi/' /etc/lightdm/lightdm.conf
  sed -i -e 's/^#autologin-user-timeout=.*/autologin-user-timeout=0/' /etc/lightdm/lightdm.conf

  # Build startup files
  media__xsession > "$KODIDIR"/.xsession
  chown kodi:kodi "$KODIDIR"/.xsession

  # Build awesome configuration
  mkdir -p "$KODIDIR/.config/awesome" || true
  media__awesome_rc_lua > "$KODIDIR/.config/awesome/rc.lua"
  media__awesome_theme_lua > "$KODIDIR/.config/awesome/theme.lua"
  chown -R kodi:kodi "$KODIDIR/.config"

  # Install retroarch
  if getbool RETROARCH; then
    settings set RETROARCHDIR "$KODIDIR/retroarch"
    media_setup_retroarch
  fi

  systemctl restart lightdm
}

media_cleanup() {
  sed -i -e 's/^user-session=.*/#user-session=/' /etc/lightdm/lightdm.conf || true
  sed -i -e 's/^autologin-user=.*/#autologin-user=/' /etc/lightdm/lightdm.conf || true
  sed -i -e 's/^autologin-user-timeout=.*/#autologin-user-timeout=/' /etc/lightdm/lightdm.conf || true
  systemctl restart lightdm
  
  # kill all processes owned by the kodi user
  sleep 5
  local processes="$(ps aux | grep ^kodi | awk '{print $2}')"
  [ -z "$processes" ] || kill -9 $processes || true

  deluser --remove-home kodi || true
  if [ -d "$KODIDIR" ]; then rm -r "$KODIDIR"; fi

  require settings
  settings del KODIDIR
  settings del RETROARCH
}

media_setup_retroarch() {
  syspackage git git
  syspackage build-essential gcc g++
  syspackage libgl1-mesa-dev /usr/include/GL/gl.h
  syspackage zlib1g-dev /usr/include/zlib.h
  syspackage libsdl2-dev /usr/include/SDL2/SDL.h
  syspackage libxml2-dev /usr/bin/xml2-config
  syspackage libusb-1.0-0-dev /usr/include/libusb-1.0/libusb.h
  syspackage libfreetype6-dev /usr/bin/freetype-config

  settings prompt_path RETROARCHDIR "$PWD/retroarch" "Retroarch directory"

  [ -d "$RETROARCHDIR/build" ] || mkdir -p "$RETROARCHDIR/build"
  (
    cd "$RETROARCHDIR/build"

    # Fetch and install RetroArch frontend
    if [ -d RetroArch ]; then
      cd RetroArch
      git pull
      cd ..
    else
      git clone git://github.com/libretro/RetroArch.git
    fi

    cd RetroArch
    ./configure --prefix="$RETROARCHDIR"
    make -j6
    make install
  )
}

media_ready() {
  if which kodi &>/dev/null \
  && [ -d "$KODIDIR" ] \
  && [ "$RETROARCH" ] \
  && which lightdm &>/dev/null \
  && grep -E '^autologin-user=kodi' /etc/lightdm/lightdm.conf &>/dev/null \
  ; then
    return 0
  fi
  return 1
}

media__xsession() {
  cat <<EOF
awesome &
sleep 0.3
kodi
EOF
}

media__awesome_rc_lua() {
  cat <<EOF
-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local beautiful = require("beautiful")
-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")
local hotkeys_popup = require("awful.hotkeys_popup").widget

-- Load Debian menu entries
require("debian.menu")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
beautiful.init(awful.util.get_themes_dir() .. "default/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "x-terminal-emulator"
editor = os.getenv("EDITOR") or "editor"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
awful.layout.layouts = {
    awful.layout.suit.max.fullscreen,
}
-- }}}

-- {{{ Helper functions
local function client_menu_toggle_fn()
    local instance = nil

    return function ()
        if instance and instance.wibox.visible then
            instance:hide()
            instance = nil
        else
            instance = awful.menu.clients({ theme = { width = 250 } })
        end
    end
end
-- }}}

-- {{{ Menu
-- Create a launcher widget and a main menu
myawesomemenu = {
   { "Retroarch", "$RETROARCHDIR/bin/retroarch -f" },
   { "Firefox", "firefox" },
   { "Terminal", "xterm" }
}

mymainmenu = awful.menu({ items = myawesomemenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- Keyboard map indicator and switcher
mykeyboardlayout = awful.widget.keyboardlayout()

-- {{{ Wibar
-- Create a textclock widget
mytextclock = wibox.widget.textclock()

-- Create a wibox for each screen and add it
local taglist_buttons = awful.util.table.join(
                    awful.button({ }, 1, function(t) t:view_only() end),
                    awful.button({ modkey }, 1, function(t)
                                              if client.focus then
                                                  client.focus:move_to_tag(t)
                                              end
                                          end),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, function(t)
                                              if client.focus then
                                                  client.focus:toggle_tag(t)
                                              end
                                          end),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
                )

local tasklist_buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  if not c:isvisible() and c.first_tag then
                                                      c.first_tag:view_only()
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, client_menu_toggle_fn()),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                          end))

local function set_wallpaper(s)
    -- Wallpaper
    if beautiful.wallpaper then
        local wallpaper = beautiful.wallpaper
        -- If wallpaper is a function, call it with the screen
        if type(wallpaper) == "function" then
            wallpaper = wallpaper(s)
        end
        gears.wallpaper.maximized(wallpaper, s, true)
    end
end

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)

awful.screen.connect_for_each_screen(function(s)
    -- Each screen has its own tag table.
    awful.tag({ "1" }, s, awful.layout.layouts[1])
end)
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
              {description = "show main menu", group = "awesome"}),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ ""    ,           }, "XF86Explorer", function () awful.util.spawn(terminal) end),
    awful.key({ ""    ,           }, "XF86Tools", function () awful.util.spawn('$RETROARCHDIR/bin/retroarch -f') end),
    awful.key({ ""    ,           }, "XF86Search", function () awful.util.spawn('firefox http://duckduckgo.com') end),
    awful.key({ ""    ,           }, "XF86HomePage", function () awful.util.spawn('firefox') end),
    awful.key({ modkey, "Control" }, "r", awesome.restart)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Escape", function (c) c:kill()                         end),
    awful.key({ modkey,           }, "space",  awful.client.floating.toggle                     )
)

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen
     }
    },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup and
      not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)
--
-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
        and awful.client.focus.filter(c) then
        client.focus = c
    end
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
EOF
}

media__awesome_theme_lua() {
  cat <<EOF
theme = {}
theme.font          = "sans 24"
theme.bg_normal     = "#222222"
theme.bg_focus      = "#336ddc"
theme.bg_urgent     = "#aa4433"
theme.bg_minimize   = "#444444"
theme.fg_normal     = "#cccccc"
theme.fg_focus      = "#ffffff"
theme.fg_urgent     = "#ffffff"
theme.fg_minimize   = "#ffffff"
theme.border_width  = "0"
theme.border_normal = "#000000"
theme.border_focus  = "#ffffff"
theme.border_marked = "#cccccc"
theme.taglist_squares_sel   = "/usr/share/awesome/themes/default/taglist/squarefw.png"
theme.taglist_squares_unsel = "/usr/share/awesome/themes/default/taglist/squarew.png"
theme.tasklist_floating_icon = "/usr/share/awesome/themes/default/tasklist/floatingw.png"
theme.menu_submenu_icon = "/usr/share/awesome/themes/default/submenu.png"
theme.menu_height = "50"
theme.menu_width  = "600"
theme.wallpaper_cmd = { "awsetbg /usr/share/kodi/media/Splash.png" }

return theme
EOF
}

media_files() {
  echo "$KODIDIR/.config/awesome/rc.lua"
  echo "$KODIDIR/.mozilla"
  echo "$KODIDIR/.kodi/userdata"
  echo "$KODIDIR/.kodi/addons"
  if getbool RETROARCH; then
    echo "$KODIDIR/.config/retroarch"
  fi
}

media_settings() {
  echo KODIDIR
  echo RETROARCH
  echo RETROARCHDIR
}

media_upgrade_1006() {
  settings set RETROARCHDIR "$KODIDIR/retroarch"
}
