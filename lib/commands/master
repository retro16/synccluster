#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


# Module to access master server

master_help() {
cat <<EOF
$SC master
  Do operations with the master server

$SC master setup [REMOTE]
  Initialize a link between this server and a remote.
  REMOTE must be of the form USER@HOST.
  Example: $SC master setup root@example.com
EOF
}

master_setup() {
  require settings
  require sshlink
echo XXX calling syspackage rsync rsync
  syspackage rsync rsync

  settings choice MASTER_MODE "standby" "Select relationship with the master server" \
     "master" "Master server, hosts all services" \
    "standby" "Standby server, synchronize periodically all services" \
     "backup" "Backup server, only stores data backup" \
     "client" "Local client, access data through NFS" \
    "roaming" "Remote client, synchronize only selected users"

  if [ "$(master mode)" != "master" ]; then
    settings prompt MASTER "" "Enter master server user and host (empty if this host is the master):"
    if [ -z "$MASTER" ]; then
      echo "Error: master server empty"
      exit 1
    fi
    if ! sshlink has "$MASTER"; then
      sshlink add "$MASTER"
    fi
    if ! sshlink check "$MASTER"; then
      echo "Link to $MASTER failed"
      exit 1
    fi
    echo "Linked successfully to $MASTER"
  else
    MASTER=""
  fi

  settings save

  require utils setup
  case "$(master mode)" in
    "master")
      require nfssrv setup
      require mail setup
      require roundcube setup
      require owncloud setup
      require wstunnel setup
      ;;
    "standby")
      require nfssrv setup
      require mail setup
      require roundcube setup
      require owncloud setup
      require wstunnel setup
      require user setup
      require crontask
      crontask add master daily
      ;;
    "backup")
      require backup setup
      require user setup
      require crontask
      crontask add master daily
      ;;
    "client")
      require nfsclient setup
      require user setup
      require crontask
      crontask add master daily
      require boot
      boot add master
      ;;
    "roaming")
      require user setup
      require crontask
      crontask add master daily
      require boot
      boot add master
      ;;
  esac
}

master_unsupported() {
  local newmode="$1"; shift
  echo "Promotion from $(master mode) to $newmode not supported"
  exit 1
}

master_promote() {
  local newmode="$1"; shift || newmode="master"

  if ! master ready; then
    echo "Master package not configured"
    exit 2
  fi

  case "$(master mode)" in
    "standby")
      case "$newmode" in
        "master")
          require crontask
          crontask del master daily
          ;;
        *)
          master_unsupported "$newmode"
          ;;
      esac
      ;;
    *)
      master_unsupported "$newmode"
      ;;
  esac

  require settings
  MASTER_MODE="$newmode"
  settings save
}

master_cron() {
  local period="$1"; shift

  broadcall sync "$MASTER" "$(master mode)"
}

master_boot() {
  broadcall sync "$MASTER" "$(master mode)"
}

# Undo the link to the master
master_cleanup() {
  require settings
  unset MASTER
  unset MASTER_MODE
  settings save
}

master_mode() {
  if [ "$MASTER_MODE" ]; then
    echo "$MASTER_MODE"
  else
    echo "master" # No master defined, we are the master
  fi
}

master_enabled() {
  if [ -z "$MASTER" ] || ! [ -r "$HOME/.ssh/id_rsa" ]; then
    return 1
  fi
  return 0
}

master_ready() {
  if master enabled && [ "$MASTER_MODE" ] && ( [ "$(master mode)" = "master" ] || ( has sshlink && sshlink check "$MASTER" ) ); then
    return 0
  fi
  return 1
}

master_exec() {
  local rv
  if [ "$MASTER" ]; then
    if sshlink exec "$MASTER" "$@"; then
      rv=0
    else
      rv="$?"
    fi
  else
    if "$@"; then
      rv=0
    else
      rv="$?"
    fi
  fi
  return $rv
}

master_status() {
  if [ "$MASTER" ]; then
    echo "This host is a $(master mode) points to master host $MASTER"
  else
    echo "This host is a master"
  fi
}

master_settings() {
  echo MASTER
  echo MASTER_MODE
}

master() {
  subcall master "$@"
}
