#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


user_help() {
cat <<EOF
$SC user: User management.

$SC user help
  This help

$SC user pull
  Synchronize users from the master
EOF
}

user_setup() {
  if has master; then
    require crontask
    crontask add user hourly
  fi

  syspackage sudo
  # Enable passwordless sudo
  cat > /etc/sudoers.d/"$SC" <<EOF
root   ALL=NOPASSWD: ALL
%sudo  ALL=NOPASSWD: ALL
EOF
}

user_cleanup() {
  if has master; then
    crontask del user hourly
  fi
}

user_add() {
  local login="$1"; shift
  local group="$1"; shift || group="$login"
    
  local newuid="$(cut -d: -f3 /etc/passwd | grep -E '100[0-9][0-9]'|sort -nr)"
  [ "$newuid" ] && newuid="$((newuid + 1))" || newuid=10000
  if ! user hasgroup "$group"; then
    user addgroup "$group"
  fi
  useradd -c '' -d "/home/$login" -m -N -u "$newuid" -g "$group" "$login"
}

user_del() {
  local login="$1"; shift

  userdel -r "$login"
}

user_has() {
  local login="$1"; shift
  if grep -E "^$login:" /etc/passwd &>/dev/null; then
    return 0
  fi
  return 1
}

user_addgroup() {
  local group="$1"
  local newgid="$(cut -d: -f3 /etc/group | grep -E '100[0-9][0-9]'|sort -nr)"
  [ "$newgid" ] && newgid="$((newgid + 1))" || newgid=10000
  groupadd -f -g "$newgid" "$group"
}

user_delgroup() {
  local group="$1"; shift
  groupdel "$group"
}

user_hasgroup() {
  local group="$1"; shift
  if grep -E "^$group:" /etc/group &>/dev/null; then
    return 0
  fi
  return 1
}

# Import a user from the master on a roaming machine
user_import() {
  local login="$1"; shift
  if grep -E "^$login:" /etc/passwd; then return 0; fi
  if ! has master; then return 0; fi

  master sc user export "$login" | IFS=: read uid gid

  useradd -c '' -d "/home/$login" -m -N -u "$uid" -g "$gid" "$login"

  # Update the password and other details
  user sync "$MASTER" "$(master mode)"
}

user_export() {
  local login="$1"; shift
  grep -E "^$login:" /etc/passwd | cut -d: -f3-4
}

# Free a user from a roaming machine
user_free() {
  local login="$1"; shift

  require master
  if [ "$(master mode)" != "roaming" ]; then
    echo "Error: this machine is not roaming."
    exit 2
  fi

  userdel -r "$login"
}

user_sync() {
  local host="$1"; shift
  local mode="$1"; shift

  if [ "$mode" = "master" ]; then return 0; fi

  if ! user enabled; then
    return 0
  fi

  require temp
  local T="$(temp dir)"

  sshlink getfiles "$host" "$T" <<EOF
/etc/passwd
/etc/shadow
/etc/group
/etc/gshadow
EOF
  cp /etc/passwd "$T"/passwd.new
  cp /etc/shadow "$T"/shadow.new
  cp /etc/group "$T"/group.new
  cp /etc/gshadow "$T"/gshadow.new

  # Merge user files

  grep -E ":x:100[0-9][0-9]:" "$T/group" | while IFS=':' read group pass gid members; do
    # Add group if missing
    if ! grep -E "^$group:x:" "$T/group.new"; then
      grep -E "^$group:x:" "$T/group" >> "$T/group.new"
      grep -E "^$group:" "$T/gshadow" >> "$T/gshadow.new"
    fi
  done

  grep -E ":x:100[0-9][0-9]:" "$T/passwd" | while IFS=':' read user pass uid gid name homedir shell; do
    if ! contains "$mode" master roaming && ! grep -E "^$user:" "$T/passwd.new" &>/dev/null; then
      # A remote user has been created: add it locally
      grep -E "^$user:" "$T/passwd" >> "$T/passwd.new"

      # Add user to the same groups as local user
      sed -i 's;\(.*:x:[0-9]*.*[:,]local.*\);\1,'"$user"';' "$T/group.new"

      # Create home directory from skeleton
      if ! [ -d "$homedir" ]; then
        cp -a /etc/skel "$homedir"
        chown -R "$uid:$gid" "$homedir"
      fi
    fi

    # Update password
    grep -vE "^$user:" "$T/shadow.new" > "$T/shadow.new."
    grep -E "^$user:" "$T/shadow" >> "$T/shadow.new."
    mv "$T/shadow.new." "$T/shadow.new"
  done

  # Update sudoers
  if grep -E "^sudo:x:" &>/dev/null "$T/group.new"; then
    grep -vE "^sudo:x:" "$T/group.new" > "$T/group.new."
    sudoers="$(grep -E "^sudo:x:" "$T/group.new" | cut -d: -f1-3):"
    while read user; do
      if grep -E "^$user:x:100[0-9][0-9]:" "$T/passwd.new"; then
        sudoers="$sudoers$user,"
        break
      fi
    done <<< "$(grep -E "^sudo:x:" "$T/group" | cut -d: -f4 | tr ',' '\n')"
    echo "${sudoers:0: -1}" >> "$T/group.new." # Remove trailing comma
    mv "$T/group.new." "$T/group.new"
  fi

  # Update system files
  mv "$T/passwd.new" /etc/passwd
  mv "$T/shadow.new" /etc/shadow
  mv "$T/group.new" /etc/group
  mv "$T/gshadow.new" /etc/gshadow
  chown root:root /etc/passwd /etc/shadow /etc/group /etc/gshadow
  chmod 644 /etc/passwd /etc/group
  chmod 600 /etc/shadow /etc/gshadow

  # Remove obsolete users
  grep -E ":x:100[0-9][0-9]:" /etc/passwd | while IFS=':' read user pass uid gid name homedir shell; do
    if ! grep -E "^$user:" "$T"/passwd; then
      echo "User $user was removed remotely. Home directory left untouched."
      userdel "$user"
      if contains "$mode" standby roaming && has unisonsync; then
        unisonsync del "$host" "$homedir"
      fi
    fi
  done

  # Remove obsolete groups
  grep -E ":x:100[0-9][0-9]:" /etc/group | while IFS=':' read group pass gid members; do
    if ! grep -E "^$group:" "$T"/group; then
      echo "Group $group was removed remotely."
      groupdel "$group"
    fi
  done

  # Synchronize files
  if contains "$mode" standby roaming && has unisonsync; then
    grep -E ":x:100[0-9][0-9]:" /etc/passwd | while IFS=':' read user pass uid gid name homedir shell; do
      unisonsync start "$host" "$homedir" 
    done
  fi

  temp release
}

user_getgroup() {
  local gid="$1"; shift

  local line="$(grep ":x:$gid:" /etc/group)"
  if [ "$line" ]; then
    local name
    local password
    local gid
    local members
    IFS=":" read name password gid members <<< "$line"
    echo "$name"
    return 0
  fi
  return 1
}

user_restoregroups() {
  local source="$1"; shift

  if ! [ -e "$1/fs/etc/group" ] || ! [ -e "$1/fs/etc/gshadow" ]; then
    echo "Missing group files in the backup" 1>&2
    exit 2
  fi

  require temp
  local tmp="$(temp dir)"
  cp /etc/group "$tmp"
  cp /etc/gshadow "$tmp"

  local name
  local password
  local gid
  local members
  grep -E ":x:100[0-9][0-9]:" "$source/fs/etc/group" | while IFS=':' read name password gid members; do
    if ! grep -E "^$name:" "$tmp/group" &>/dev/null; then
      # Restore missing group
      echo "$name:$password:$gid:$members" >> "$tmp/group"
      grep -E "^$name:" "$source/fs/etc/gshadow" >> "$tmp/gshadow"
    fi
  done

  mv "$tmp/group" /etc/group
  mv "$tmp/gshadow" /etc/gshadow
  chown root:root /etc/group /etc/gshadow
  chmod 644 /etc/group
  chmod 600 /etc/gshadow

  temp release
}

# Restore sudoers from a backup, but filter out non-existing users
user_restoresudoers() {
  local source="$1"; shift

  local sourcegroup="$source/fs/etc/group"

  if grep -E "^sudo:x:" &>/dev/null "/etc/group"; then
    require temp
    local group="$(temp file)"

    grep -vE "^sudo:x:" /etc/group > "$group"
    sudoers="$(grep -E "^sudo:x:" /etc/group | cut -d: -f1-3):"
    while read user; do
      if grep -E "^$user:" /etc/passwd; then
        sudoers="$sudoers$user,"
        break
      fi
    done <<< "$(grep -E "^sudo:x:" "$sourcegroup" | cut -d: -f4 | tr ',' '\n')"
    echo "${sudoers:0: -1}" >> "$group" # Remove trailing comma
    mv "$group" /etc/group

    chown root:root /etc/group
    chmod 644 /etc/group

    temp release
  fi
}

user_restore() {
  local source="$1"; shift

  if ! [ -e "$1/fs/etc/passwd" ] || ! [ -e "$1/fs/etc/shadow" ]; then
    echo "Missing passwd files in the backup" 1>&2
    exit 2
  fi

  user restoregroups "$source"

  require temp
  local tmp="$(temp dir)"
  cp /etc/passwd "$tmp"
  cp /etc/shadow "$tmp"

  local user
  local pass
  local uid
  local gid
  local name
  local homedir
  local shell
  grep -E ":x:100[0-9][0-9]:" "$source/fs/etc/passwd" | while IFS=':' read user pass uid gid name homedir shell; do
    if ! user has "$user"; then
      # Restore missing user
      echo "$user:$pass:$uid:$gid:$name:$homedir:$shell" >> "$tmp/passwd"
      grep -E "^$name:" "$source/fs/etc/shadow" >> "$tmp/shadow"

      # Restore home directory data
      if [ -e "$source/fs/$homedir" ] && ! [ -e "$homedir" ]; then
        cp -a "$source/fs/$homedir" "$homedir"
      else
        echo "Warning: could not restore home directory of user $user"
      fi
    fi
  done

  mv "$tmp/passwd" /etc/passwd
  mv "$tmp/shadow" /etc/shadow
  chown root:root /etc/passwd /etc/shadow
  chmod 644 /etc/passwd
  chmod 600 /etc/shadow

  temp release

  user restoresudoers "$source"
}

user_enabled() {
  if ! [ -e /etc/sudoers.d/"$SC" ]; then
    return 1
  fi
  if has master; then
    if crontask has user hourly; then
      return 0
    fi
    return 1
  fi
  return 0
}

user_ready() {
  if user enabled; then
    return 0
  fi
  return 1
}

user_files() {
  echo /etc/passwd
  echo /etc/shadow
  echo /etc/group
  echo /etc/gshadow
  echo "/home/[^.]*"
}

user() {
  subcall user "$@"
}
