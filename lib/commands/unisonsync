#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


unisonsync_setup() {
  require settings
  syspackage unison unison
  settings prompt_path UNISON "/var/lib/unison" "Enter the UNISON base directory:"
  unisonsync common_profile > "$UNISON/_common.prf"
  settings save
}

unisonsync__remotesetup() {
  # Setup a remote host to make sure that it is unison compatible
  require sshlink
  sshlink add "$host"
  if ! sshlink exec "$host" which unison &>/dev/null; then
    if ! sshlink exec "$host" apt install unison; then
      echo "Error: unison not installed on remote host $host"
      exit 2
    fi
  fi
}

unisonsync_settings() {
  echo UNISON
}

unisonsync_clean() {
  require settings
  require crontask

  unset UNISON
  crontask del unisonsync

  settings save
}

unisonsync_add() {
  local host="$1"; shift
  local remotepath="$1"; shift
  local localpath="$1"; shift || localpath="$remotepath"
  local period="$1"; shift || period=""

  if ! unisonsync ready; then
    unisonsync setup
  fi

  require sshlink
  sshlink add "$host"

  cat > "$UNISON/$(unisonsync profilename "$host" "$remotepath" "$period").prf" << EOF
include _common
root = $localpath
root = ssh://root@$host/$remotepath
EOF

  unisonsync__remotesetup "$host"

  if [ "$period" ]; then
    require crontask
    crontask add unisonsync "$period"
  fi
}

unisonsync_has() {
  local host="$1"; shift
  local remotepath="$1"; shift
  local period="$1"; shift || period=""

  if [ -e "$UNISON/$(unisonsync profilename "$host" "$remotepath" "$period").prf" ]; then
    return 0
  fi
  return 1
}

# Returns the name of the profile based on a host and a path
unisonsync_profilename() {
  local host="$1"; shift
  local remotepath="$1"; shift
  local period="$1"; shift || period=""

  echo "${period}:${host}$(tr -c '[a-zA-Z0-9]' '_' <<< "$remotepath")"
}

unisonsync_del() {
  local host="$1"; shift
  local remotepath="$1"; shift
  local period="$1"; shift || period=""

  rm "$UNISON/$(unisonsync profilename "$host" "$remotepath" "$period").prf"
  if [ "$period" ] && ! ls "$UNISON/$period:"*.prf &>/dev/null; then
    require crontask
    crontask del unisonsync "$period"
  fi
}

unisonsync_enabled() {
  if [ "$UNISON" ]; then
    return 0
  fi
  return 1
}

unisonsync_ready() {
  if [ "$UNISON" ] && unisonsync enabled && [ -e "$UNISON/_common.prf" ] && which unison &>/dev/null; then
    return 0
  fi
  return 1
}

unisonsync_files() {
  ls -NU "$UNISON"/[^_.]*.prf 2>/dev/null || true
}

# Synchronize profiles from a remote host
unisonsync_sync() {
  local host="$1"; shift
  local mode="$1"; shift

  if contains "$mode" master backup client; then return 0; fi

  require files
  files pull unisonsync "$host"
}

# Execute a file synchronization
unisonsync_start() {
  local host="$1"; shift
  local remotepath="$1"; shift
  local localpath="$1"; shift || localpath="$remotepath"
  local period="$1"; shift || period=""

  if ! unisonsync has "$host" "$remotepath" "$period"; then
    unisonsync add "$host" "$remotepath" "$localpath" "$period"
  fi

  export UNISON
  unison "$(unisonsync profilename "$host" "$remotepath" "$period")"
}

unisonsync_cron() {
  local period="$1"; shift

  if ! unisonsync ready; then
    return 0;
  fi

  export UNISON
  for f in "$UNISON/$period:"*.prf; do
    unison "$(basename "$f" .prf)"
  done
}

unisonsync_common_profile() {
cat <<'EOF'
batch = true
times = true
silent = true
retry = 1
addversionno = true
sshargs = -C

owner = true
times = true

prefer = newer

ignore = Regex .*/\.?[cC]ache/.*
ignore = Name [lL]ock
ignore = Name .parentlock
ignore = Name *.[lL]ock
ignore = Name *.nps
ignore = Name *.o
ignore = Name *~
ignore = Name .*~
ignore = Name .[tT]rash*
ignore = Name .*.swp
ignore = Name [Tt]humbs.db
ignore = Name $RECYCLE.BIN
ignore = Name Crash Reports
ignore = Name .nvidia-settings-rc
ignore = Name .dmrc
ignore = Name .xscreensaver
ignore = Name .*authority
ignore = Name .xsession-errors*
ignore = Name .Trash*
ignore = Name .viminfo
ignore = Name .lesshst
ignore = Name .bash_history
ignore = Name .bash_logout
ignore = Path Documents/HTC
ignore = Path .local
ignore = Path .adobe
ignore = Path .audacity-data
ignore = Path .cache
ignore = Path .dbus
ignore = Path .nv
ignore = Path .wine
ignore = Path .thumbnails
ignore = Path .gstreamer-*
EOF
}
