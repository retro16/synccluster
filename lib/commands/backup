#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


backup_setup() {
  require settings
  require crontask
  settings prompt BACKUP_DIR "/srv/backup" "Backup directory path"
  if ! [ -d "$BACKUP_DIR" ]; then
    echo "$BACKUP_DIR not found. Aborting"
    exit 2
  fi
  BACKUP_LIST=" "
  settings save

  crontask add backup hourly
  crontask add backup daily
  crontask add backup weekly
}

backup_cleanup() {
  require settings
  unset BACKUP_DIR
  unset BACKUP_LIST
  settings save
}

backup_add() {
  local host="$1"; shift
  local period="$1"; shift || period="daily"
  require settings
  require sshlink

  sshlink add "$host"

  BACKUP_LIST="$BACKUP_LIST ${period}_$host "

  settings save
}

backup_del() {
  require settings

  BACKUP_LIST="$(sed -e "s/ $period_$host //" <<< "$BACKUP_LIST")"

  settings save
}

backup_cron() {
  local period="$1"; shift

  local bhost
  local bperiod
  local bdblist
  local bdb
  local bdbuser
  local bdbname
  for b in $BACKUP_LIST; do
    bperiod="${b%%_*}"
    bhost="${b#*_}"
    [ "$bperiod" = "$period" ] || continue

    backup start "$bhost"
  done
}

backup_start() {
  local bhost="$1"; shift

  [ -d "$BACKUP_DIR/$bhost/fs" ] || mkdir -p "$BACKUP_DIR/$bhost/fs"
  require sshlink
  sshlink sc "$bhost" broadcall files | sshlink getfiles "$bhost" "$BACKUP_DIR/$bhost/fs"

  bdblist="$(sshlink sc "$bhost" broadcall db)"
  if [ "$bdblist" ]; then
    require db
    [ -d "$BACKUP_DIR/$bhost/db" ] || mkdir -p "$BACKUP_DIR/$bhost/db"
    for bdb in $bdblist; do
      bdbuser="${bdb%%:*}"
      bdbname="${bdb#*:}"
      sshlink sc "$bhost" db backup "$bdbuser" "$bdbname" > "$BACKUP_DIR/$bhost/db/$bdb.xz"
    done
  fi
}

backup_restore_from() {
  local source="$1"; shift
  
  require user
  user restore "$source"
  broadcall restore "$source"
}

backup_enabled() {
  if [ "$BACKUP_LIST"] && [ "$BACKUP_DIR" ] && [ -d "$BACKUP_DIR" ]; then
    return 0
  fi
  return 1
}

backup_ready() {
  if backup enabled; then
    return 0
  fi
  return 1
}

backup_sync() {
  local host="$1"; shift
  local mode="$1"; shift

  if [ "$mode" = backup ]; then
    require sshlink
    sshlink getsettings "$host" BACKUP_LIST
  fi
}

backup_settings() {
  echo BACKUP_DIR
  echo BACKUP_LIST
}

backup() {
  subcall backup "$@"
}
