#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


backup_setup() {
  require settings
  require crontask
  settings prompt_path BACKUP_DIR "/srv/backup" "Backup directory path"
  BACKUP_LIST=" "
  settings save

  crontask add backup hourly
  crontask add backup daily
  crontask add backup weekly
}

backup_cleanup() {
  require settings
  unset BACKUP_DIR
  unset BACKUP_LIST
  crontask del backup hourly
  crontask del backup daily
  crontask del backup weekly
  settings save
}

backup_add() {
  local entry="$1"; shift
  local period="$1"; shift || period="daily"
  require settings
  require sshlink
  require backup setup

  local host="${entry%%:*}"

  sshlink add "$host"
  if [ "$host" != "$entry" ] && ! sshlink has_sc "$host"; then
    echo "Error: $SC is not installed on $host"
    exit 1
  fi

  BACKUP_LIST="$BACKUP_LIST${period}:$entry "

  settings save
}

backup_del() {
  local entry="$1"; shift
  local period="$1"; shift || period="daily"
  require settings

  BACKUP_LIST="$(sed -e "s/$period:$entry //" <<< "$BACKUP_LIST")"

  settings save
}

backup_cron() {
  local period="$1"; shift

  local bentry
  local bperiod
  for b in $BACKUP_LIST; do
    bperiod="${b%%:*}"
    bentry="${b#*:}"
    [ "$bperiod" = "$period" ] || continue

    backup start "$bentry"
  done
}

backup_start() {
  local entry="$1"; shift
  local host="${entry%%:*}"
  require sshlink

  [ -d "$BACKUP_DIR/$host/fs" ] || mkdir -p "$BACKUP_DIR/$host/fs"

  if [ "$host" != "$entry" ]; then
    # Backup a SC compatible host
    sshlink sc "$host" broadcall files | sshlink getfiles "$bost" "$BACKUP_DIR/$host/fs"
    local dblist="$(sshlink sc "$host" broadcall db)"

    if [ "$dblist" ]; then
      require db
      local db
      local dbuser
      local dbname
      [ -d "$BACKUP_DIR/$host/db" ] || mkdir -p "$BACKUP_DIR/$host/db"
      for db in $bdblist; do
        dbuser="${db%%:*}"
        dbname="${db#*:}"
        sshlink sc "$host" db backup "$dbuser" "$dbname" > "$BACKUP_DIR/$host/db/$db.xz"
      done
    fi
  else
    # Backup a specific path on a foreign host
    local path="${entry#*:}"
    sshlink getfiles "$host" "$DIRBACKUP_ROOT/$host/fs" <<< "$path"
  fi
}

backup_restore_from() {
  local source="$1"; shift
  
  require user
  user restore "$source"
  broadcall restore "$source"
}

backup_enabled() {
  if [ "$BACKUP_LIST"] && [ "$BACKUP_DIR" ] && [ -d "$BACKUP_DIR" ]; then
    return 0
  fi
  return 1
}

backup_ready() {
  if backup enabled \
  && has crontask \
  && crontask has backup hourly \
  && crontask has backup daily \
  && crontask has backup weekly \
  ; then
    return 0
  fi
  return 1
}

backup_sync() {
  local host="$1"; shift
  local mode="$1"; shift

  if [ "$mode" = backup ]; then
    require sshlink
    sshlink getsettings "$host" BACKUP_LIST
  fi
}

backup_settings() {
  echo BACKUP_DIR
  echo BACKUP_LIST
}

backup() {
  subcall backup "$@"
}
