#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


# Backs up sc modules


scbackup_setup() {
  require crontask
  require settings
  syspackage rsync rsync
  settings prompt SCBACKUP_ROOT "/home/.local/backup" "Enter the root path for remote backup:"
  if ! [ -d "$SCBACKUP_ROOT" ]; then
    echo "Invalid backup root path"
    exit 2
  fi
  settings save
  crontask add scbackup daily
}

scbackup_clean() {
  require settings
  unset SCBACKUP_ROOT
  settings save
}

# Add a new path
scbackup_add() {
  local host="$1"; shift || host="localhost"
  require settings
  sshlink add "$host"
  SCBACKUP_LIST="$SCBACKUP_LIST $host "
  settings save
}

# Remove a path
scbackup_del() {
  local host="$1"; shift || host="localhost"
  require settings
  SCBACKUP_LIST="$(sed -e "s/ $host //" <<< "$SCBACKUP_LIST")"
}

# Do a backup of one host
scbackup_backup() {
  local host="$1"; shift || host="localhost"

  require sshlink
  sshlink sc "$host" cmdlist ready | while read cmd; do
    files="$(sshlink sc "$host" $cmd files)"
    dbs="$(sshlink sc "$host" $cmd db)"
    if ! [ -d "$SCBACKUP_ROOT/$host/fs" ]; then
      mkdir -p "$SCBACKUP_ROOT/$host/fs"
    fi
    sshlink getfiles "$host" "$SCBACKUP_ROOT/$host/fs" <<< "$files"
    if [ "$dbs" ]; then
      if ! [ -d "$SCBACKUP_ROOT/$host/db" ]; then
        mkdir -p "$SCBACKUP_ROOT/$host/db"
      fi
      echo "$dbs" | while read d; do
        sshlink sc "$host" db backup "$d" > "$SCBACKUP_ROOT/$host/db/$d.sql.xz"
      done
    fi
  done
}

scbackup_restore() {
  local backup="$SCBACKUP_ROOT/$1"; shift

  if ! [ -d "$backup" ]; then
    echo "Error: could not find backup $backup"
    exit 2
  fi

  for mod in "$@"; do
    require "$mod" setup
    "$mod" files | while read -r f; do
      [ -d "$(dirname "$f")" ] || mkdir -p "(dirname "$f")"
      rsync -aP "$backup/fs/$f" "$f"
    done
    local db="$(optcall "$mod" db)"
    if [ "$db" ]; then
      require db setup
      db restore "$backup/db/$mod.sql.xz"
    fi
  done
}

scbackup_enabled() {
  if [ -z "$SCBACKUP_ROOT" ] || ! [ -d "$SCBACKUP_ROOT" ] || [ -z "${SCBACKUP_LIST}" ]; then
    return 1
  fi
  return 0
}

scbackup_exclude_list() {
  cat <<EOF
- *.o
- .*.swp
- [cC]ache/
- .[cC]ache/
- [lL]ock
- .parentlock
- *.nps
- *~
- .*~
- .[tT]rash*
- [tT]humbs.db
- \$RECYCLE.BIN
- Crash Reports
- /**/Documents/HTC/**
EOF
}

scbackup_cron() {
  require temp
  for h in $SCBACKUP_LIST; do
    scbackup backup "$h"
  done
}

scbackup_list() {
  for h in $SCBACKUP_LIST; do
    echo "$h"
  done
}

scbackup_settings() {
  echo SCBACKUP_ROOT
  echo SCBACKUP_LIST
}

scbackup() {
  subcall scbackup "$@"
}

