#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


cloud_version="12.0.3"
cloud_url="https://download.nextcloud.com/server/releases/nextcloud-${cloud_version}.zip"

cloud_requires() {
  echo settings
  echo user
  echo mail # Uses imap as authentication server
  echo www
  echo db
}

cloud_setup() {
  require www setup

  settings prompt CLOUD_PASSWORD "" "Owncloud admin and database password"
  settings prompt_path CLOUDDIR "/srv/cloud" "Owncloud storage path"
  syspackage smbclient smbclient

  chown -R www-data:www-data "$CLOUDDIR"

  [ -e "$WWWDIR/cloud" ] || cloud get
  cloud apache_conf | www addconf cloud
  cloud create_db
  cloud init
  cloud config

  settings save

  chown -R root:www-data "$CLOUDDIR/.htaccess"
}

cloud_cleanup() {
  www delconf cloud
  rm -rf "$WWWDIR/cloud"
  db del cloud cloud
}

cloud_get() {
  syspackage unzip unzip
  require temp
  temp file
  wget -O"$TEMP_FILE" "$cloud_url"

  unzip "$TEMP_FILE" -d "$WWWDIR"
  mv "$WWWDIR/nextcloud" "$WWWDIR/cloud"
  chown -R www-data:www-data "$WWWDIR/cloud/apps"
  chown -R www-data:www-data "$WWWDIR/cloud/config"
  chown -R www-data:www-data "$WWWDIR/cloud/themes"
  chown -R root:www-data "$WWWDIR/cloud/.htaccess"

  temp release
}

cloud_apache_conf() {
  cat <<EOF
Alias /cloud "$WWWDIR/cloud"
Redirect 301 /owncloud /cloud
Redirect 301 /nextcloud /cloud

<Directory "$WWWDIR/cloud">
    Options +FollowSymLinks
    AllowOverride All

    <IfModule mod_dav.c>
      Dav off
    </IfModule>

    SetEnv HOME $WWWDIR/cloud
    SetEnv HTTP_HOME $WWWDIR/cloud
</Directory>

<Directory "$CLOUDDIR/">
  # just in case if .htaccess gets disabled
  Require all denied
</Directory>

Redirect 301 /.well-known/carddav /cloud/remote.php/carddav
Redirect 301 /.well-known/caldav  /cloud/remote.php/caldav
EOF
}

cloud_create_db() {
  require db setup

  db add cloud "$CLOUD_PASSWORD" cloud
}

cloud_init() {
  cloud occ maintenance:install --database pgsql --database-name cloud --database-host localhost --database-user cloud --database-pass "${CLOUD_PASSWORD}" --admin-user admin --admin-pass "${CLOUD_PASSWORD}" --data-dir "$CLOUDDIR"
  cloud occ app:enable files_external
  cloud occ app:enable user_external
}

cloud_config() {
  require temp
  temp file
  head -n -1 "$WWWDIR/cloud/config/config.php" > "$TEMP_FILE"
  cat >> "$TEMP_FILE" <<EOF
  'memcache.local' => '\\\\OC\\\\Memcache\\\\APCu',
  'user_backends' => 
  array (
    0 => 
    array (
      'class' => 'OC_User_IMAP',
      'arguments' => 
      array (
        0 => '{localhost:143/imap/tls/novalidate-cert}INBOX',
      ),
    ),
  ),
);
EOF
  require hostconf setup
  sed -i "/    0 => 'localhost',/a    1 => '$(hostconf domain)'," "$TEMP_FILE"
  chown www-data:www-data "$TEMP_FILE"
  mv "$TEMP_FILE" "$WWWDIR/cloud/config/config.php"
  temp forget
}

cloud_occ() {
  trap "sed -i 's;^\\(www-data:.*:\\).*;\\1/usr/sbin/nologin;' /etc/passwd" EXIT
  sed -i 's;^\(www-data:.*:\).*;\1/bin/bash;' /etc/passwd

  pushd "$WWWDIR/cloud" &>/dev/null
  su -c "php occ $*" www-data
  popd &>/dev/null

  sed -i 's;^\\(www-data:.*:\\).*;\\1/usr/sbin/nologin;' /etc/passwd
  trap EXIT
}

cloud_db() {
  echo "cloud:cloud"
}

cloud_files() {
  cat <<EOF
$WWWDIR/cloud/config/config.php
$CLOUDDIR
EOF
}

cloud_sync() {
  local host="$1"; shift
  local mode="$1"; shift

  if [ "$mode" != standby ]; then return 0; fi

  db pull cloud "$host"

  require sshlink
  sshlink getfiles "$host" <<< "$WWWDIR/cloud/config/config.php"

  require unisonsync
  unisonsync start "$host" "$(sshlink sc "$host" settings get CLOUDDIR)" "$CLOUDDIR"
}

cloud_ready() {
  if [ -d "$CLOUDDIR" ] && [ -e "$WWWDIR/cloud/config/config.php" ] && db has cloud && www hasconf cloud; then
    return 0
  fi
  return 1
}

cloud_settings() {
  echo CLOUD_PASSWORD
  echo CLOUDDIR
}

cloud_upgrade_1005() {
  if cloud ready; then
    syspackage smbclient smbclient
  fi
}

cloud_upgrade_1006() {
  if cloud ready; then
    cloud occ upgrade
  fi
}
