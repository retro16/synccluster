#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


### Initialization ###
SCMODULES=""


### Global functions ###

# Call a submodule
subcall() {
  mod="$1"; shift
  sub="$1"; shift
  if [ "$(type -t "${mod}_$sub")" = "function" ]; then
    "${mod}_$sub"
  else
    echo "Cannot find $SC $mod $sub"
    exit 1
  fi
}

# Import a common module
require() {
  if [[ " $SCMODULES " == *" $1 "* ]]; then
    # Already loaded
    return 0
  fi
  if [ -r "$SCLIBDIR/$1" ]; then
    source "$SCLIBDIR/$1"
  elif [ -r "$SCCMDDIR/$1" ]; then
    source "$SCCMDDIR/$1"
  else
    echo "Required module $1 not found"
    exit 2
  fi
  SCMODULES="$SCMODULES $1"
}

# Import an optional module
has() {
  if [[ " $SCMODULES " == *" $1 "* ]]; then
    # Already loaded
    true
  elif [ -r "$SCLIBDIR/$1" ]; then
    source "$SCLIBDIR/$1"
  elif [ -r "$SCCMDDIR/$1" ]; then
    source "$SCCMDDIR/$1"
  else
    return 2
  fi
  SCMODULES="$SCMODULES $1"
  if [ "$(type -t "${mod}_enabled")" = "function" ]; then
    if ! "${mod}_enabled"; then
      # The module does not want to exist !
      return 1
    fi
  fi
  return 0
}

# Check that command-lines are available, and if some are missing, install the corresponding system package
syspackage() {
  local package="$1"; shift
  local commands
  if [ "$#" -gt 0 ]; then
    commands=("$@")
  else
    commands=("$package")
  fi

  for c in "${commands[@]}"; do
    if ! which "$c" &>/dev/null; then
      apt install "$package"
      return $?
    fi
  done
}

