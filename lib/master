#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


# Module to access master server

master_help() {
cat <<EOF
$SC master
  Do operations with the master server

$SC master setup [REMOTE]
  Initialize a link between this server and a remote.
  REMOTE must be of the form USER@HOST.
  Example: $SC master setup root@example.com
EOF
}

master__link() {
  require settings
  settings prompt MASTER "" "Enter master server host"
  if [ -z "$MASTER" ]; then
    echo "Error: master server empty"
    exit 1
  fi
  if ! sshlink has "$MASTER"; then
    sshlink add "$MASTER"
  fi
  if ! sshlink has_sc "$MASTER"; then
    echo "$SC not installed on $MASTER"
    exit 2
  fi
  master update_sc
  echo "Linked successfully to $MASTER"
}

master_setup() {
  local backupsource="$1"; shift || true
  require settings
  require sshlink

  syspackage rsync rsync

  settings choice MASTER_MODE "master" "Select relationship with the master server" \
     "master" "Master server, hosts all services" \
    "standby" "Standby server, synchronize periodically all services" \
     "backup" "Backup server, only stores data backup" \
     "client" "Local client, access data through NFS" \
    "roaming" "Remote client, synchronize only selected users"

  if [ "$(master mode)" != "master" ]; then
    master__link
  else
    MASTER=""
  fi

  settings save

  require utils setup
  case "$(master mode)" in
    "master")
      require mass setup
      require nfssrv setup
      require mail setup
      require roundcube setup
      require owncloud setup
      require wstunnel setup
      require user setup
      master__allow_root_ssh
      utils server
      ;;
    "standby")
      require ssl
      ssl sync "$MASTER" standby
      sshlink importsettings "$MASTER" mass unisonsync mail roundcube owncloud update
      require mass setup
      require nfssrv setup
      require mail setup
      require roundcube setup
      require owncloud setup
      require wstunnel setup
      require user setup
      require unisonsync setup
      require crontask
      require sshlink
      require nfsclient
      nfsclient add "$MASTER" "$MASSDIR" "$MASSDIR" cache
      crontask add master daily
      crontask add master fast
      master__allow_root_ssh
      utils server
      ;;
    "backup")
      require backup setup
      require user setup
      require crontask
      sshlink importsettings "$MASTER" update
      crontask add master daily
      ;;
    "client")
      require nfsclient
      nfsclient add "$MASTER" /home
      sshlink importsettings "$MASTER" mass update
      [ -d "$MASSDIR" ] || mkdir -p "$MASSDIR"
      nfsclient add "$MASTER" "$MASSDIR"
      require user setup
      require crontask
      crontask add master daily
      crontask add master fast
      require boot
      boot add master
      utils client
      ;;
    "roaming")
      require user setup
      require crontask
      sshlink importsettings "$MASTER" mass settings
      require mass setup
      sshshare add "$MASTER" "$MASSDIR"
      crontask add master daily
      require unisonsync setup
      require boot
      boot add master
      utils client
      ;;
  esac
  if [ "$backupsource" ]; then
    if ! [ -d "$backupsource/fs" ]; then
      echo "$backupsource is not a valid backup path"
      exit 1
    fi
    require backup
    backup restore_from "$backupsource"
  fi
  master pull
}

master__allow_root_ssh() {
  sed -i 's/PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
  systemctl restart ssh
}

master__unsupported() {
  local newmode="$1"; shift
  echo "Promotion from $(master mode) to $newmode not supported"
  exit 1
}

master_promote() {
  local newmode="$1"; shift || newmode="master"

  if ! master ready; then
    echo "Master package not configured"
    exit 2
  fi

  if [ "$newmode" = "$(master mode)" ]; then
    echo "Already in $newmode mode"
    exit 2
  fi

  case "$(master mode)" in
    "standby")
      case "$newmode" in
        "master")
          require crontask
          crontask del master daily
          require nfsclient
          if [ "$MASSDIR" ] && nfsclient has "$MASTER" "$MASSDIR"; then
            nfsclient del "$MASTER" "$MASSDIR"
          fi
          require mass setup
          ;;
        *)
          master__unsupported "$newmode"
          ;;
      esac
      ;;
    "master")
      case "$newmode" in
        "standby")
          master__link
          require unisonsync setup
          require crontask
          crontask add master daily
          require mass setup
          if [ "$MASSDIR" ] && [ -d "$MASSDIR" ]; then
            require nfsclient
            if ls "$MASSDIR"/* &>/dev/null; then
              echo "Warning: $MASSDIR not empty. Will be overridded by a remote share."
            fi
            nfsclient add "$MASTER" "$MASSDIR" "$MASSDIR" cache
          fi
          ;;
        *)
          master__unsupported "$newmode"
          ;;
      esac
      ;;
    "client")
      case "$newmode" in
        "roaming")
          nfsclient del "$MASTER" /home
          nfsclient del "$MASTER" "$MASSDIR"
          sshshare add "$MASTER" "$MASSDIR"
          require user
          user cleanup_local
          master pull
          ;;
        *)
          master__unsupported "$newmode"
          ;;
      esac
      ;;
    "roaming")
      case "$newmode" in
        "client")
          sshshare del "$MASTER" "$MASSDIR"
          nfsclient add "$MASTER" /home
          nfsclient add "$MASTER" "$MASSDIR"
          require user
          user cleanup_local
          ;;
        *)
          master__unsupported "$newmode"
          ;;
      esac
      ;;
    *)
      master__unsupported "$newmode"
      ;;
  esac

  require settings
  MASTER_MODE="$newmode"
  settings save
}

master_pull() {
  require user
  user pull "$MASTER" "$(master mode)"
  broadcall sync "$MASTER" "$(master mode)"
}

master_cron() {
  local period="$1"; shift
  master update_sc
  case "$period" in
    daily)
      master pull
      ;;
    fast)
      require user
      user pull "$MASTER" "$(master mode)"
      ;;
  esac
}

master_boot() {
  master update_sc
  master pull
}

# Undo the link to the master
master_cleanup() {
  require settings
  unset MASTER
  unset MASTER_MODE
  settings save
}

master_mode() {
  if [ "$MASTER_MODE" ]; then
    echo "$MASTER_MODE"
  else
    echo "master" # No master defined, we are the master
  fi
}

master_enabled() {
  if [ -z "$MASTER" ] || ! [ -r "$HOME/.ssh/id_rsa" ]; then
    return 1
  fi
  return 0
}

master_ready() {
  if master enabled && [ "$MASTER_MODE" ] && ( [ "$(master mode)" = "master" ] || ( has sshlink && sshlink has "$MASTER" ) ); then
    # Check that all packages are configured
    case "$(master_mode)" in
      master)
        if has nfssrv && nfssrv ready \
        && has mail && mail ready \
        && has roundcube && roundcube ready \
        && has owncloud && owncloud ready \
        && has wstunnel && wstunnel ready; then
          return 0
        fi
        ;;
      standby)
        if has unisonsync && unisonsync ready \
        && has nfssrv && nfssrv ready \
        && has mail && mail ready \
        && has roundcube && roundcube ready \
        && has owncloud && owncloud ready \
        && has wstunnel && wstunnel ready; then
          return 0
        fi
        ;;
      backup)
        if has backup && backup ready; then
          return 0
        fi
        ;;
      client)
        if has nfsclient && nfsclient has /home && has mass && nfsclient has "$MASSDIR" && has boot && boot has master; then
          return 0
        fi
        ;;
    esac
  fi
  return 1
}

master_exec() {
  local rv
  if [ "$MASTER" ]; then
    if sshlink exec "$MASTER" "$@"; then
      rv=0
    else
      rv="$?"
    fi
  else
    if "$@"; then
      rv=0
    else
      rv="$?"
    fi
  fi
  return $rv
}

master_buildnumber() {
  echo "$SCVERSION"
}

master_update_sc() {
  if [ "$MASTER" ]; then
    require sshlink
    local remoteversion="$(sshlink sc "$MASTER" master buildnumber || true)"
    if [ "$remoteversion" = "Cannot find $SC master buildnumber" ]; then
      echo "$SC on $MASTER does not support update"
      return 0
    fi
    if [ "$remoteversion" -gt "$SCVERSION" ]; then
      if [ "$((remoteversion/1000))" -ne "$((SCVERSION/1000))" ]; then
        echo "Cannot update $SC from $MASTER: major version number differ"
        return 1
      fi
      echo "Updating $SC from $MASTER"
      sshlink getfiles "$MASTER" <<EOF
$SCBIN
$SCLIBDIR
EOF
      local old="$SCVERSION"
      SCVERSION="$remoteversion"

      # Call module upgrade for all modules
      upgrade_modules "$old"
    fi
  fi
}

master_status() {
  if [ "$MASTER" ]; then
    echo "This host is a $(master mode) points to master host $MASTER"
  else
    echo "This host is a master"
  fi
}

master_settings() {
  echo MASTER
  echo MASTER_MODE
}

master_upgrade_1003() {
  if [ "$MASTER_MODE" = standby && "$MASSDIR" ]; then
    if has sshshare && sshshare has "$MASTER" "$MASSDIR"; then
      if has nfssrv && nfssrv ready; then
        systemctl stop nfs-kernel-server
      fi
      sshshare del "$MASTER" "$MASSDIR"
      require nfsclient
      nfsclient add "$MASTER" "$MASSDIR" "$MASSDIR" cache
      if has nfssrv && nfssrv ready; then
        systemctl start nfs-kernel-server
      fi
    fi
  fi
}
