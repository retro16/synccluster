#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


ssl_setup() {
  require settings
  syspackage openssl openssl
  syspackage ssl-cert "/etc/ssl/certs/ssl-cert-snakeoil.pem" "/etc/ssl/private/ssl-cert-snakeoil.key"

  settings prompt SSLCERT "/etc/ssl/certs/ssl-cert-snakeoil.pem" "Path to SSL certificate (crt or pem):"
  if ! [ -r "$SSLCERT" ]; then
    echo "Certificate not found"
    exit 2
  fi

  settings prompt SSLKEY "/etc/ssl/private/ssl-cert-snakeoil.key" "Path to SSL key:"
  if ! [ -r "$SSLKEY" ]; then
    echo "Key not found"
    exit 2
  fi

  settings save
}

ssl_restore() {
  local source="$1"; shift
  local source_version="$1"; shift

  require settings
  require files
  settings import "$source" "$mod"
  files restoremodule "$mod" "$source"
}

ssl_cleanup() {
  require settings
  unset SSLCERT
  unset SSLKEY
  settings save
}

ssl_ready() {
  if [ -r "$SSLCERT" ] && [ -r "$SSLKEY" ]; then
    return 0
  fi
  return 1
}

ssl_enabled() {
  if [ "$SSLCERT" ] && [ "$SSLKEY" ]; then
    return 0
  fi
  return 1
}

ssl_sync() {
  local host="$1"; shift
  local mode="$1"; shift

  if [ "$mode" = master ]; then return 0; fi

  require sshlink
  if [ -z "$SSLCERT" ] || [ -z "$SSLKEY" ]; then
    # Initial setup
    require settings
    sshlink importsettings "$host" ssl
    settings save
  fi
  ssl files | sshlink getfiles "$host"
}

ssl_files() {
  if [ "${SSLCERT#/etc/letsencrypt/}" != "$SSLCERT" ] && [ "${SSLKEY#/etc/letsencrypt/}" != "$SSLKEY" ]; then
    echo /etc/letsencrypt
  else
    echo "$SSLCERT"
    echo "$SSLKEY"
  fi
}

ssl_settings() {
  echo SSLCERT
  echo SSLKEY
}
