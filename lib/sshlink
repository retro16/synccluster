#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


sshlink_add() {
  local host="$1"; shift || host=localhost
  if sshlink has "$host"; then
    return 0
  fi
  if [ "$host" != localhost ]; then
    syspackage openssh-client ssh ssh-keygen ssh-copy-id
    syspackage rsync rsync

    if ! [ -r "$HOME/.ssh/id_rsa" ]; then
      ssh-keygen
    fi

    ssh-copy-id "$host"
    if ! sshlink has "$host"; then
      echo "Link to $host failed"
      exit 1
    fi
  fi
  echo "Linked successfully to $host"
}

sshlink_has() {
  local host="$1"; shift || host=localhost
  if [ "$host" = "localhost" ]; then
    return 0
  fi
  if ssh -n -o ConnectTimeout=2 -o PasswordAuthentication=no "$host" exit 0; then
    return 0
  fi
  return 1
}

sshlink_has_sc() {
  local host="$1"; shift || host=localhost
  if [ "$host" = "localhost" ]; then
    return 0
  fi
  if ssh -n -o ConnectTimeout=2 -o PasswordAuthentication=no "$host" sc sshlink exec localhost exit 0; then
    return 0
  fi
  return 1
}

sshlink_exec() {
  local host="$1"; shift || host=localhost
  if [ "$host" = "localhost" ]; then
    if "$@"; then
      return 0
    fi
    return $?
  else
    if ssh "$host" "$@"; then
      return 0
    fi
    return $?
  fi
}

sshlink_sc() {
  local host="$1"; shift || host=localhost
  if [ "$host" = "localhost" ]; then
    if ! [ "$(type -t "$1")" = "function" ]; then
      require "$1"
    fi
    if "$@"; then
      return 0
    fi
    return $?
  else
    if ssh "$host" sc sshlink scremote "$@"; then
      return 0
    fi
    return $?
  fi
}

sshlink_scremote() {
  if [ -z "$1" ]; then
    return 1
  fi
  if ! [ "$(type -t "$1")" = "function" ]; then
    require "$1"
  fi
  if "$@"; then
    return 0
  fi
  return $?
}

# Copy remote files to a local directory.
# File list is passed as stdin, parameter is the copy target.
sshlink_getfiles() {
  local host="$1"; shift || host=localhost
  local target="$1"; shift || target="/"
  if [ "$host" = localhost ] && [ "$target" = "/" ]; then return 0; fi
  if [ "$host" = localhost ]; then
    host=""
  else
    host="$host:"
  fi
  require temp
  temp file EXCLUDE_LIST
  sshlink_exclude_list > "$EXCLUDE_LIST"
  rsync -az --delete --files-from=- -r --filter=". $EXCLUDE_LIST" "$host"/ "$target" || true
  temp release EXCLUDE_LIST
}

sshlink_getsettings() {
  local host="$1"; shift
  require settings

  local m
  local slist
  local s

  for m in "$@"; do
    require "$m"
    slist="$(sshlink sc "$host" "$m" settings)"
    for s in $slist; do
      settings set "$s" "$(sshlink sc "$host" settings get "$s")"
    done
  done

  settings save
}

sshlink_exclude_list() {
  cat <<EOF
- *.o
- .*.swp
- [cC]ache/
- .[cC]ache/
- [lL]ock
- .parentlock
- .[lL]ock
- *.nps
- *~
- .*~
- .[tT]rash*
- [tT]humbs.db
- \$RECYCLE.BIN
- Crash Reports
- .nvidia-settings-rc
- .dmrc
- .xscreensaver
- .*authority
- .xsession-errors*
- .Trash*
- .viminfo
- .lesshst
- .bash_history
- .bash_logout
- .local
- .adobe
- .audacity-data
- .dbus
- .nv
- .wine
- .thumbnails
- .gstreamer-*
- .unison.*
- ownCloud
- tmp
- Download.*
- Téléchargements
EOF
}

sshlink_putfiles() {
  local host="$1"; shift || host=localhost
  local target="$1"; shift || target="/"
  if [ "$host" = localhost ] && [ "$target" = "/" ]; then return 0; fi
  rsync -az --delete --files-from=- -r / "$host":"$target"
}

sshlink_check_sc() {
  local host="$1"; shift || host=localhost
  if [ "$host" = "localhost" ]; then
    return 0
  fi
  if ssh -n -o ConnectTimeout=1 "$host" "which '$SC' &>/dev/null"; then
    return 0
  fi
  return 1
}
