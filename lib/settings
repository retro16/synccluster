#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


# List all settings
settings_list() {
  # Hardcoded settings
  echo SCROOTDIR
  echo SCPREFIX
  echo SCLIBDIR
  echo SCBIN
  echo SCDEF

  # Modules settings
  for m in $SCMODULES; do
    if [ "$(type -t "${m}_settings")" = "function" ]; then
      "${m}_settings"
    fi
  done
}

# Print all settings with their values
settings_print() {
  local mod="$1"; shift || true

  if [ "$mod" ]; then
    require "$mod"
    if [ "$(type -t "${m}_settings")" = "function" ]; then
      for s in $("${m}_settings"); do
        if [ "${!s+x}" ]; then
          echo "$s='${!s}'"
        fi
      done
    fi
  else
    for s in $(settings list); do
      if [ "${!s+x}" ]; then
        echo "$s='${!s}'"
      fi
    done
  fi
}

# Save settings
settings_save() {
  local foreign_settings;
  if [ "$SCSETTINGS" ]; then
    if [ -r "$SCSETTINGS" ]; then
      local local_settings_list="$(settings list | sed -e 's/$/=/' -e 's/^/\^/')"
      foreign_settings="$(grep -E -v -f- "$SCSETTINGS" <<< "$local_settings_list" || true)"
    fi
    settings print > "$SCSETTINGS".new
    echo "$foreign_settings" >> "$SCSETTINGS".new
    mv "$SCSETTINGS".new "$SCSETTINGS"
  fi
}

settings_set() {
  local name="$1"; shift
  local value="$1"; shift

  declare -g "$name=$value"

  settings save
}

settings_del() {
  local name="$1"; shift
  eval "unset $name"

  settings save
}

settings_get() {
  local name="$1"; shift
  echo "${!name}"
}

# Set a setting
# Prompt the user for its value if unset
# Do not change its value if set
settings_prompt() {
  local name="$1"; shift
  local default="$1"; shift || default=""
  local prompt="$1"; shift || prompt="Please enter the value of $name"

  syspackage dialog dialog

  if [ -z "${!name}" ]; then
    local v="$( \
      dialog --inputbox -- "$prompt" 0 74 "$default" 3>&1 1>&2 2>&3 3>&- \
    )"
    clear
    declare -g "$name=$v"
  fi
}

settings_prompt_bool() {
  local name="$1"; shift
  local default="$1"; shift || default=""
  local prompt="$1"; shift || prompt="Please enter the value of $name"

  syspackage dialog dialog

  if [ -z "${!name}" ]; then
    if [ "$default" ]; then
      default=""
    else
      default="--defaultno"
    fi
    if dialog $default --yesno -- "$prompt" 0 0; then
      declare -g "$name=0"
    else
      declare -g "$name=1"
    fi
    clear
  fi
}

settings_prompt_path() {
  local name="$1"; shift
  local default="$1"; shift || default=""
  local prompt="$1"; shift || prompt="Please enter the path to $name"

  syspackage dialog dialog

  settings_prompt "$name" "$default" "$prompt"
  if ! [ -d "${!name}" ]; then
    if ! [ -e "${!name}" ]; then
      if dialog --yesno -- "Path ${!name} does not exist. Create it ?" 0 0; then
        mkdir -p "${!name}"
      else
        echo "Missing path"
        exit 1
      fi
    else
      echo "Error: Path ${!name}Â exists but is not a directory"
      exit 2
    fi
  fi
}

settings_choice() {
  local name="$1"; shift
  local default="$1"; shift
  local prompt="$1"; shift

  syspackage dialog dialog

  if [ -z "${!name}" ]; then
    local v="$( \
      dialog --menu -- "$prompt" 0 0 0 "$@" 3>&1 1>&2 2>&3 3>&- \
    )"
    clear
    declare -g "$name=$v"
  fi
}
