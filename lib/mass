#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


export MASSDIR="/srv/mass"

mass_requires() {
  echo settings
}

mass_setup() {
  [ -d "$MASSDIR" ] || mkdir -p "$MASSDIR"

  if ! has master || [ "$(master mode)" = "master" ]; then
    settings set MASSMODE separated
    settings prompt_bool MASSBACKUP "" "Backup mass directory ?"
  else
    settings choice MASSMODE separated \
      separated "Separated mass storage" \
      unison "Unison synchronization" \
      sshfs "SSHFS remote access" \
      nfs4 "NFSv4 remote access with cachefilesd"

    if [ "$MASSMODE" = "separated" ]; then
      settings prompt_bool MASSBACKUP "" "Backup mass directory ?"
    else
      settings set MASSBACKUP 1 # Do not backup slave mass directory
    fi
    mass setup_sync
  fi

  settings save
}

mass_setup_sync() {
  case "$MASSMODE" in
    separated)
      break
      ;;
    unison)
      require unisonsync
      unisonsync add "$(master host)" "$(master getvar MASSDIR)" "$MASSDIR" daily
      ;;
    sshfs)
      require sshshare
      sshshare add "$(master host)" "$(master getvar MASSDIR)" "$MASSDIR"
      ;;
    nfs4)
      require nfsclient
      nfsclient add "$(master host)" "$(master getvar MASSDIR)" "$MASSDIR" cache
      ;;
  esac
}

mass_cleanup() {
  case "$MASSMODE" in
    separated)
      break
      ;;
    unison)
      require unisonsync
      unisonsync del "$(master host)" "$(master getvar MASSDIR)" daily
      ;;
    sshfs)
      require sshshare
      sshshare del "$(master host)" "$(master getvar MASSDIR)" "$MASSDIR"
      ;;
    nfs4)
      require nfsclient
      nfsclient del "$MASSDIR"
      ;;
  esac
  require settings
  unset MASSMODE
  unset MASSBACKUP
  settings save
}

mass_ready() {
  [ -d "$MASSDIR" ] && isbool MASSBACKUP && [ "$MASSMODE" ]
}

mass_files() {
  if ! has master || [ "$(master mode)" = "master" ]; then
    if mass enabled && getbool MASSBACKUP; then
      echo "$MASSDIR"
    fi
  fi
}

mass_settings() {
  echo MASSBACKUP
  echo MASSMODE
}

mass_upgrade_1005() {
  require settings
  if has master && [ "$(master mode)" != "master" ]; then
    if [ "$(master mode)" = "roaming" ]; then
      settings set MASSMODE sshfs
    else
      settings set MASSMODE nfs4
    fi
  else
    settings set MASSMODE separated
  fi
  settings save
}
