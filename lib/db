#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


db_requires() {
  echo settings
}

db_setup() {
  syspackage postgresql pg_createcluster
  syspackage postgresql-contrib /usr/lib/postgresql/$PGVERSION/bin/pgdump
  syspackage postgresql-client psql

  PGVERSION="$(pg_lsclusters | tail -1 | cut -d' ' -f1)"
  settings save
}

db_ready() {
  if db enabled; then
    return 0
  fi
  return 1
}

db_cleanup() {
  unset PGVERSION
  settings save
}

# Output a backup of the local db as an xz file on stdout
db_backup() {
  local user="$1"; shift
  local database="$1"; shift || database="$user"
  syspackage xz-utils xz
  syspackage postgresql-client pg_dump pg_dumpall
  pushd / &>/dev/null
  (
  echo "DROP DATABASE IF EXISTS $database;"
  echo "DROP ROLE IF EXISTS $user;"
  su -c "pg_dumpall --roles-only | grep -P '^(?:CREATE|DROP|ALTER) ROLE $user' " postgres
  echo "CREATE DATABASE $database OWNER=$user;"
  echo "\connect $database"
  su -c "pg_dump --no-tablespaces $database" postgres
  ) | xz -c -8
  popd &>/dev/null
}

# Restores data generated by db backup from stdin into the local postgres
db_restorestream() {
  local database="$1"; shift || database=postgres

  syspackage xz-utils unxz
  syspackage postgresql-client psql
  pushd / &>/dev/null
  su -c "unxz -c | psql -q postgres" postgres >/dev/null
  popd &>/dev/null
}

db_restoremodule() {
  local module="$1"; shift
  local source="$1"; shift

  require "$module"

  # Check if the module has a db
  if ! cancall "$module" db; then return 0; fi

  local dbname
  local dbfile
  for dbname in "$("$module" db)"; do
    dbfile="$source/db/$dbname.xz"
    if [ -e "$dbfile" ]; then
      db restorestream < "$dbfile"
    else
      echo "Error: Backup of database $dbname missing"
      exit 2
    fi
  done
}

db_add() {
  local user="$1"; shift
  local password="$1"; shift
  local database="$1"; shift || database="$user"

  pushd / &>/dev/null
  su -c "psql -c 'DROP DATABASE IF EXISTS $database;'" postgres
  su -c "psql -c 'DROP ROLE IF EXISTS $user;'" postgres
  su -c "psql -c 'CREATE USER $user WITH PASSWORD '\'${password}\'';'" postgres
  su -c "psql -c 'CREATE DATABASE $database OWNER=$user;'" postgres
  popd &>/dev/null
}

db_del() {
  local user="$1"; shift
  local database="$1"; shift || database="$user"
  pushd / &>/dev/null
  su -c "psql -c 'DROP DATABASE IF EXISTS $database;'" postgres
  su -c "psql -c 'DROP ROLE IF EXISTS $user;'" postgres
  popd &>/dev/null
}

db_has() {
  local database="$1"; shift

  local rv
  pushd / &>/dev/null
  rv="$(su -c "psql -tAc \"SELECT 1 FROM pg_database WHERE datname='$database';\"" postgres)"
  popd &>/dev/null

  if [ "$rv" -eq 1 ]; then
    return 0
  fi

  return 1
}

db_list() {
  pushd / &>/dev/null
  su -c "psql -tAc \"SELECT datname FROM pg_database;\"" postgres | grep -v -e template0 -e template1 -e postgres
  popd &>/dev/null
}

db_sql() {
  local user="$1"; shift
  local password="$1"; shift
  local database="$1"; shift || database="$user"

  pushd / &>/dev/null
  PGPASSWORD="${password}" psql -U "$user" -h localhost -p 5432 "$database"
  popd &>/dev/null
}

# Pull a remote database to the local database
# Used for synchronization
db_pull() {
  local module="$1"; shift
  local host="$1"; shift

  require sshlink
  local dblist="$(sshlink sc "$host" "$module" db)"

  local db
  local dbuser
  local dbname
  if [ "$dblist" ]; then
    for db in $dblist; do
      dbuser="${db%%:*}"
      dbname="${db#*:}"
      sshlink sc "$host" db backup "$dbuser" "$dbname" | db restorestream "$dbname"
    done
  fi
}

# Returns the hashed password of a user
db_getpw() {
  local user="$1"; shift
  su -c "pg_dumpall -r" postgres | grep "ALTER ROLE $user " | cut -d\' -f2
}

db_enabled() {
  if [ "$PGVERSION" ] && ls "/usr/lib/postgresql/$PGVERSION/bin/postgres" &>/dev/null && netstat -platun | grep -E ":5432.*LISTEN.*postgres" &>/dev/null; then
    return 0
  fi
  return 1
}

db_settings() {
  echo PGVERSION
}
