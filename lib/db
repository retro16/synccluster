#!/bin/bash
###############################################################################
<<LICENSE

The MIT License (MIT)

Copyright (c) 2016 Jean-Matthieu COULON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

LICENSE
###############################################################################


db_setup() {
  require settings

  syspackage postgresql pg_createcluster
  syspackage postgresql-contrib /usr/lib/postgresql/$PGVERSION/bin/pgdump
  syspackage postgresql-client psql

  PGVERSION="$(pg_lsclusters | tail -1 | cut -d' ' -f1)"
  settings save
}

db_ready() {
  if db enabled; then
    return 0
  fi
  return 1
}

db_cleanup() {
  require settings
  unset PGVERSION
  settings save
}

# Output a backup of the local db as an xz file on stdout
db_backup() {
  local user="$1"; shift
  local database="$1"; shift || database="$user"
  syspackage xz xz-utils
  syspackage postgresql-client pg_dump pg_dumpall
  pushd / &>/dev/null
  su -c "pg_dumpall --roles-only | grep -P '^(?:CREATE|DROP|ALTER) ROLE $user' " postgres
  echo "DROP DATABASE IF EXISTS $database;"
  echo "CREATE DATABASE $database OWNER=$user;"
  su -c "pg_dump -c $database | xz -c -6" postgres
  popd &>/dev/null
}

# Restores a xz backup from stdin into the local postgres
db_restore() {
  syspackage unxz xz-utils
  syspackage postgresql-client psql
  pushd / &>/dev/null
  su -c 'unxz -c | psql -q' postgres >/dev/null
  popd &>/dev/null
}

db_add() {
  local user="$1"; shift
  local password="$1"; shift
  local database="$1"; shift || database="$user"

  pushd / &>/dev/null
  su -c "psql -c 'DROP DATABASE IF EXISTS $database;'" postgres
  su -c "psql -c 'DROP ROLE IF EXISTS $user;'" postgres
  su -c "psql -c 'CREATE USER $user WITH PASSWORD '\'${password}\'';'" postgres
  su -c "psql -c 'CREATE DATABASE $database OWNER=$user;'" postgres
  popd &>/dev/null
}

db_del() {
  local user="$1"; shift
  local database="$1"; shift || database="$user"
  pushd / &>/dev/null
  su -c "psql -c 'DROP DATABASE IF EXISTS $database;'" postgres
  su -c "psql -c 'DROP ROLE IF EXISTS $user;'" postgres
  popd &>/dev/null
}

db_sql() {
  local user="$1"; shift
  local password="$1"; shift
  local database="$1"; shift || database="$user"

  pushd / &>/dev/null
  PGPASSWORD="${password}" psql -U "$user" -h localhost -p 5432 "$database"
  popd &>/dev/null
}

db_enabled() {
  if [ "$PGVERSION" ] && ls "/usr/lib/postgresql/$PGVERSION/bin/postgres" &>/dev/null && netstat -platun | grep -E ":5432.*LISTEN.*postgres" &>/dev/null; then
    return 0
  fi
  return 1
}

db_settings() {
  echo PGVERSION
}

db() {
  subcall db "$@"
}

